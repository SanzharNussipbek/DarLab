{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { EventEmitter } from \"events\";\nconst config = {\n  url: \"ws://zaaz-live.dar-dev.zone\",\n  room: \"DAR123\",\n  userId: ``,\n  reconnect: true\n};\n\nclass SocketClient {\n  constructor(config) {\n    this.config = config;\n    this.socket = void 0;\n    this.reconnectTimeout = void 0;\n    this.eventEmitter = new EventEmitter();\n    this.init(config);\n  }\n\n  static getInstance(config) {\n    if (!this.instance) {\n      this.instance = new SocketClient(config);\n    }\n\n    return this.instance;\n  }\n\n  init(config) {\n    this.socket = new WebSocket(`${config.url}?room=${config.room}&userId=${config.userId}`);\n    this.socket.addEventListener('close', () => this.onClose());\n    this.socket.addEventListener('open', () => this.onOpen());\n    this.socket.addEventListener('message', e => this.onMessage(e));\n  }\n\n  onClose() {\n    console.log('WEBSOCKET CLOSED');\n\n    if (this.config.reconnect) {\n      this.reconnectTimeout = setTimeout(() => {\n        this.init(this.config);\n      }, 5000);\n    }\n  }\n\n  onOpen() {\n    console.log('WEBSOCKET OPENED');\n\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n    }\n  }\n\n  // close() {\n  //     if(this.reconnectTimeout) {\n  //         clearTimeout(this.reconnectTimeout);\n  //     }\n  //     this.config.reconnect = false;\n  //     this.socket?.close;\n  // };\n  sendMessage(text) {\n    var _this$socket;\n\n    const event = 'message';\n    (_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.send(JSON.stringify({\n      event,\n      data: text\n    }));\n  }\n\n  onMessage(e) {\n    console.log(e);\n    const message = JSON.parse(e.data);\n    this.eventEmitter.emit(message.type, {\n      data: message.data\n    });\n  }\n\n}\n\nSocketClient.instance = void 0;\nexport function useWebSocket(externalConfig) {\n  var _socketClient$socket;\n\n  const conf = { ...config,\n    ...externalConfig\n  };\n  const [socketClient, setSocketClient] = useState(SocketClient.getInstance(conf));\n  useEffect(() => {\n    setSocketClient(SocketClient.getInstance(conf));\n  }, [socketClient === null || socketClient === void 0 ? void 0 : (_socketClient$socket = socketClient.socket) === null || _socketClient$socket === void 0 ? void 0 : _socketClient$socket.readyState]);\n  return socketClient;\n}","map":{"version":3,"sources":["/Users/nsanzhar_/Documents/GitHub/DarLab/darlab1/src/services/chat.ts"],"names":["useState","useEffect","EventEmitter","config","url","room","userId","reconnect","SocketClient","constructor","socket","reconnectTimeout","eventEmitter","init","getInstance","instance","WebSocket","addEventListener","onClose","onOpen","e","onMessage","console","log","setTimeout","clearTimeout","sendMessage","text","event","send","JSON","stringify","data","message","parse","emit","type","useWebSocket","externalConfig","conf","socketClient","setSocketClient","readyState"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }from 'react';\nimport { ChatMessage, SocketClientConfig } from \"../types/Intefaces\";\nimport { EventEmitter } from \"events\";\n\nconst config: SocketClientConfig = {\n    url: \"ws://zaaz-live.dar-dev.zone\",\n    room: \"DAR123\",\n    userId: ``,\n    reconnect: true\n}\n\nclass SocketClient {\n\n    private static instance: SocketClient | undefined;\n\n    socket: WebSocket | undefined;\n\n    reconnectTimeout: any;\n\n    eventEmitter = new EventEmitter();\n\n    constructor(private config: SocketClientConfig) {\n        this.init(config);\n    }\n    static getInstance(config: SocketClientConfig) {\n        if (!this.instance){\n            this.instance = new SocketClient(config);\n        }\n        return this.instance;\n    }\n\n    init(config: SocketClientConfig) {\n        this.socket = new WebSocket(`${config.url}?room=${config.room}&userId=${config.userId}`);\n        this.socket.addEventListener('close', () => this.onClose());\n        this.socket.addEventListener('open', () => this.onOpen());\n        this.socket.addEventListener('message', (e) => this.onMessage(e));\n    };\n\n    onClose() {\n        console.log('WEBSOCKET CLOSED');\n        if (this.config.reconnect) {\n            this.reconnectTimeout = setTimeout(() => {\n                this.init(this.config);\n            }, 5000);\n        }\n    };\n\n    onOpen() {\n        console.log('WEBSOCKET OPENED');\n        if(this.reconnectTimeout) {\n            clearTimeout(this.reconnectTimeout);\n        }\n    };\n\n    // close() {\n    //     if(this.reconnectTimeout) {\n    //         clearTimeout(this.reconnectTimeout);\n    //     }\n    //     this.config.reconnect = false;\n    //     this.socket?.close;\n    // };\n\n    sendMessage(text: string) {\n        const event = 'message';\n        this.socket?.send(JSON.stringify({event, data: text}));\n    };\n\n    onMessage(e: MessageEvent) {\n        console.log(e);\n        const message = JSON.parse(e.data);\n        this.eventEmitter.emit(message.type, {data: message.data});\n    };\n}\n\nexport function useWebSocket(externalConfig?: Partial<SocketClientConfig>) {\n    const conf = {\n        ...config,\n        ...externalConfig,\n    }\n\n    const [socketClient, setSocketClient] = useState<SocketClient>(SocketClient.getInstance(conf));\n\n    useEffect(() => {\n        setSocketClient(SocketClient.getInstance(conf));\n    }, [socketClient?.socket?.readyState])\n\n    return socketClient;\n}"]},"metadata":{},"sourceType":"module"}