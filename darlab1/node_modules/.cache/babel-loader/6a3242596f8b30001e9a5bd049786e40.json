{"ast":null,"code":"var _jsxFileName = \"/Users/nsanzhar_/Documents/GitHub/DarLab/darlab1/src/components/input/Input.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"./Input.scss\";\nexport const Input = ({\n  name,\n  placeholder,\n  onChange\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [inputChanged, setInputChanged] = useState(false);\n  const [inputError, setInputError] = useState({});\n\n  const changeHandler = value => {\n    setInputValue(value);\n\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  useEffect(() => {\n    setInputChanged(true);\n    if (!inputChanged) return;\n\n    if (required && !inputValue) {\n      setInputError({\n        isEmpty: true\n      });\n      return;\n    }\n\n    if (inputValue.match(/\\s/g)) {\n      setInputError({\n        isInvalid: true,\n        isEmpty: false\n      });\n      return;\n    }\n\n    setInputError({\n      isEmpty: false,\n      isInvalid: false\n    });\n  }, [inputValue]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: name,\n    className: \"input-field\",\n    placeholder: placeholder,\n    onChange: e => changeHandler(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, inputError.isEmpty ? \"This field is required\" : '', inputError.isInvalid ? \"Entered value is invalid\" : ''));\n};","map":{"version":3,"sources":["/Users/nsanzhar_/Documents/GitHub/DarLab/darlab1/src/components/input/Input.tsx"],"names":["React","useState","useEffect","Input","name","placeholder","onChange","inputValue","setInputValue","inputChanged","setInputChanged","inputError","setInputError","changeHandler","value","required","isEmpty","match","isInvalid","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,cAAP;AASA,OAAO,MAAMC,KAAqC,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA;AAArB,CAAD,KAAoC;AAErF,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAS,EAAT,CAA5C;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAU,KAAV,CAAhD;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAA2C,EAA3C,CAA5C;;AAEA,QAAMY,aAAa,GAAIC,KAAD,IAAmB;AACrCN,IAAAA,aAAa,CAACM,KAAD,CAAb;;AACA,QAAGR,QAAH,EAAY;AACRA,MAAAA,QAAQ,CAACQ,KAAD,CAAR;AACH;AACJ,GALD;;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEA,QAAG,CAACD,YAAJ,EAAkB;;AAElB,QAAGM,QAAQ,IAAI,CAACR,UAAhB,EAA4B;AACxBK,MAAAA,aAAa,CAAC;AACVI,QAAAA,OAAO,EAAE;AADC,OAAD,CAAb;AAGA;AACH;;AAED,QAAGT,UAAU,CAACU,KAAX,CAAiB,KAAjB,CAAH,EAA4B;AACxBL,MAAAA,aAAa,CAAC;AACVM,QAAAA,SAAS,EAAE,IADD;AAEVF,QAAAA,OAAO,EAAE;AAFC,OAAD,CAAb;AAIA;AACH;;AAEDJ,IAAAA,aAAa,CAAC;AACVI,MAAAA,OAAO,EAAE,KADC;AAEVE,MAAAA,SAAS,EAAE;AAFD,KAAD,CAAb;AAIH,GAxBQ,EAwBN,CAACX,UAAD,CAxBM,CAAT;AA0BA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AACQ,IAAA,IAAI,EAAEH,IADd;AAEQ,IAAA,SAAS,EAAC,aAFlB;AAGQ,IAAA,WAAW,EAAEC,WAHrB;AAIQ,IAAA,QAAQ,EAAGc,CAAD,IAAON,aAAa,CAACM,CAAC,CAACC,MAAF,CAASN,KAAV,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMH,UAAU,CAACK,OAAX,GAAqB,wBAArB,GAAgD,EADtD,EAEML,UAAU,CAACO,SAAX,GAAuB,0BAAvB,GAAoD,EAF1D,CANJ,CADJ;AAaH,CApDM","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport \"./Input.scss\"\n\ntype Props = {\n    name: string,\n    placeholder: string,\n    required?: boolean,\n    onChange?: (val: string) => void;\n}\n\nexport const Input: React.FunctionComponent<Props> = ({ name, placeholder, onChange}) => {\n\n    const [inputValue, setInputValue] = useState<string>('')\n    const [inputChanged, setInputChanged] = useState<boolean>(false)\n    const [inputError, setInputError] = useState<{isEmpty?: boolean; isInvalid?: boolean}>({})\n\n    const changeHandler = (value: string) => {\n        setInputValue(value)\n        if(onChange){\n            onChange(value);\n        }\n    };\n\n    useEffect(() => {\n        setInputChanged(true);\n\n        if(!inputChanged) return;\n\n        if(required && !inputValue) {\n            setInputError({\n                isEmpty: true\n            });\n            return;\n        }\n\n        if(inputValue.match(/\\s/g)) {\n            setInputError({\n                isInvalid: true,\n                isEmpty: false\n            });\n            return;\n        }\n\n        setInputError({\n            isEmpty: false,\n            isInvalid: false\n        });\n    }, [inputValue]);\n\n    return (\n        <div className=\"Input\">\n            <input type=\"text\"\n                    name={name} \n                    className=\"input-field\"\n                    placeholder={placeholder} \n                    onChange={(e) => changeHandler(e.target.value)}></input>\n            <div className=\"form-error\">\n                { inputError.isEmpty ? \"This field is required\" : ''}\n                { inputError.isInvalid ? \"Entered value is invalid\" : ''}\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}